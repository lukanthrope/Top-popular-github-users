{"version":3,"sources":["reducers/reducer.js","store/store.js","components/header.js","components/container.js","actions/actions.js","components/users-styles.js","components/users.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","users","error","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","currentUser","find","user","id","payload","userId","starsCount","sumOfStars","newUsers","map","store","createStore","applyMiddleware","thunk","styled","header","_templateObject","div","container_templateObject","LOAD","city","dispatch","axios","get","concat","then","response","users10","data","items","slice","forEach","login","reduce","el","prev","stargazers_count","catch","Usr","users_styles_templateObject","Img","img","_templateObject2","Name","h2","_templateObject3","props","isLink","Info","p","_templateObject4","Err","_templateObject5","User","react_default","a","createElement","alt","src","avatarUrl","target","href","App","this","load","_this$props","container","components_users","avatar_url","key","Component","connect","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b93fbfe.chunk.js","sourcesContent":["let defaultState = {\r\n    users: [],\r\n    error: false\r\n};\r\n\r\nconst reducer = (state=defaultState, action) => {\r\n    if (action.type === \"LOAD\") {\r\n        return {\r\n            ...state,\r\n            users: action.users\r\n        }\r\n    }\r\n    \r\n    if (action.type === \"SUM_OF_STARS\") {\r\n        const users = state.users;\r\n        const currentUser = users.find((user) => {\r\n            return user.id === action.payload.userId\r\n        });\r\n        currentUser.starsCount = action.payload.sumOfStars || 0;\r\n        const newUsers = users.map((user) => {\r\n            if (user.id === currentUser.id) {\r\n                return currentUser;\r\n            }\r\n            return user;\r\n        });    \r\n\r\n        return {\r\n            ...state,\r\n            users: newUsers\r\n        }\r\n    }\r\n\r\n    if (action.type === \"ERROR\") {\r\n        return {\r\n            ...state,\r\n            error: true\r\n        }\r\n    }\r\n\r\n    return {\r\n        ...state\r\n    }\r\n}\r\n\r\nexport default reducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../reducers/reducer';\r\n\r\nlet store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import styled from 'styled-components';\r\n\r\nexport default styled.header`\r\n    background-color: #E8E8E8;\r\n    width: 100%;\r\n    height: 70px;\r\n    text-align: center;\r\n    padding-top: 10px;\r\n    padding-bottom: 10px;\r\n`;","import styled from 'styled-components';\r\n\r\nexport default styled.div`\r\n    margin: auto;\r\n    margin-top: 80px;\r\n    width: 60%;\r\n    height: 70px;\r\n    padding-bottom: 10px;\r\n`;","import axios from 'axios';\r\n\r\nexport const LOAD = (city = 'Khmelnytskyi') => dispatch => {\r\n\r\n    return axios.get(`https://api.github.com/search/users?q=location:${city}+sort:followers`)\r\n        .then((response) => {\r\n            const users10 = response.data.items.slice(0, 10);\r\n            dispatch({\r\n                type: 'LOAD',\r\n                users: users10\r\n            });\r\n            \r\n            users10.forEach(user => {\r\n                axios.get(`https://api.github.com/users/${user.login}/repos`)\r\n                    .then((response) => {\r\n                        const repos = response.data;\r\n                        \r\n                        let sumOfStars = repos.reduce((el, prev) => {\r\n                            \r\n                            if (prev.stargazers_count) {\r\n                                return prev.stargazers_count + el;\r\n                            } else {\r\n                                return el;\r\n                            }\r\n                        }, 0);\r\n\r\n                        dispatch({\r\n                            type: 'SUM_OF_STARS',\r\n                            payload: {\r\n                                userId: user.id, \r\n                                sumOfStars\r\n                            }, \r\n                        });\r\n                    });\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            dispatch({\r\n                type: 'ERROR'\r\n            })\r\n        });\r\n}","import styled from 'styled-components';\r\n\r\nexport const Usr = styled.div `\r\n    position: relative;\r\n    margin-top: 100px;\r\n    margin-bottom: 110px;\r\n    border-top: 1px solid black;\r\n    padding-top: 20px;\r\n`;\r\n\r\nexport const Img = styled.img `\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 10px;\r\n    float: left;\r\n    margin-left: 5%;\r\n    margin-top: 10px;\r\n`;\r\n\r\nexport const Name = styled.h2 `\r\n    float: left;\r\n    margin-left: 5%;\r\n    margin-top: 5px;\r\n    color: ${props => props.isLink ? \"#0099FF\" : \"black\"};\r\n    font-size: ${props => props.isLink ? \"\" : \"1.2em\"};\r\n`;\r\n\r\nexport const Info = styled.p `\r\n    float: right;\r\n    margin-right: 5%;\r\n    margin-top: 10px;\r\n    color: orange;\r\n    font-size: 2em;\r\n`;\r\n\r\nexport const Err = styled.div `\r\n    color: red;\r\n    text-align: center;\r\n    font-size: 1.3em;\r\n    margin-top: 15%;\r\n`;","import React, { Component } from 'react';\r\nimport {Usr, Img, Name, Info} from './users-styles';\r\n\r\nfunction User(props) {\r\n    return(\r\n        <Usr>\r\n            <Img alt=\"user-image\" src={props.avatarUrl}/>\r\n            <a target=\"_blank\" href={`https://github.com/${props.login}`}>\r\n                <Name isLink>{props.login}</Name>\r\n            </a>\r\n            <Info>stars:{props.starsCount}</Info>\r\n        </Usr>\r\n    );\r\n}\r\n\r\nexport default User;","import Header from './components/header';\nimport React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport Container from './components/container';\nimport {LOAD} from './actions/actions';\nimport User from './components/users';\nimport {Err} from './components/users-styles';\n\nfunction mapStateToProps(state) {\n  return {\n    users: state.users,\n    error: state.error\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    load: () => dispatch(LOAD()),\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.load();\n  }\n\n  render() {\n    const {users, load, error} = this.props;\n  \n    return ( \n        <div>\n          <Header>\n            <h2>Most popular Github users in Khmelnytskyi</h2>\n          </Header>\n          <Container>\n            {error && <Err>\n                <h1>Try later - something went wrong :\\</h1>\n              </Err>\n            }\n            {users.map((user) => {\n              return(\n                <User \n                  avatarUrl={user.avatar_url} \n                  key={user.id}\n                  login={user.login}\n                  starsCount={user.starsCount}\n                />\n                );\n            })}\n          \n          </Container>\n        </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport store from './store/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));    \n\nserviceWorker.unregister();\n"],"sourceRoot":""}